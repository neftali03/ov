# Generated by Django 4.2.21 on 2025-05-12 21:38

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import common.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "is_human",
                    common.models.fields.BooleanField(
                        default=True, verbose_name="Is the user human?"
                    ),
                ),
                (
                    "is_management",
                    common.models.fields.BooleanField(
                        default=False, verbose_name="Is the user on the top management?"
                    ),
                ),
                ("tmp_password", common.models.fields.BooleanField(default=True)),
                (
                    "previous_password",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=128),
                        blank=True,
                        default=list,
                        size=5,
                    ),
                ),
                (
                    "created_at",
                    common.models.fields.DateTimeField(verbose_name="Creado"),
                ),
                (
                    "updated_at",
                    common.models.fields.DateTimeField(verbose_name="Actualizado"),
                ),
                (
                    "created_by",
                    common.models.fields.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_users",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creado por",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "updated_by",
                    common.models.fields.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="updated_users",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Actualizado por",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ActionLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("db_user", common.models.fields.TextField()),
                ("db_schema", common.models.fields.TextField()),
                ("db_table", common.models.fields.TextField()),
                (
                    "action",
                    common.models.fields.TextField(
                        choices=[
                            ("CREATE", "Crear"),
                            ("UPDATE", "Actualizar"),
                            ("DELETE", "Eliminar"),
                        ]
                    ),
                ),
                ("model_id", common.models.fields.PositiveBigIntegerField()),
                ("old_data", common.models.fields.JSONField(null=True)),
                ("new_data", common.models.fields.JSONField(null=True)),
                ("created_at", common.models.fields.DateTimeField()),
            ],
            options={
                "verbose_name": "Registro de acci贸n",
                "verbose_name_plural": "Registro de acciones",
                "permissions": [("view_action_log", "Ver registro de acciones")],
            },
        ),
        migrations.CreateModel(
            name="ActionLogHistorical",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("db_user", common.models.fields.TextField()),
                ("db_schema", common.models.fields.TextField()),
                ("db_table", common.models.fields.TextField()),
                (
                    "action",
                    common.models.fields.TextField(
                        choices=[
                            ("CREATE", "Crear"),
                            ("UPDATE", "Actualizar"),
                            ("DELETE", "Eliminar"),
                        ]
                    ),
                ),
                ("model_id", common.models.fields.PositiveBigIntegerField()),
                ("old_data", common.models.fields.JSONField(null=True)),
                ("new_data", common.models.fields.JSONField(null=True)),
                ("created_at", common.models.fields.DateTimeField()),
            ],
            options={
                "verbose_name": "Registro hist贸rico de acci贸n",
                "verbose_name_plural": "Registro hist贸rico de acciones",
                "permissions": [
                    ("view_action_log_historical", "Ver registro hist贸rico de acciones")
                ],
            },
        ),
        migrations.CreateModel(
            name="RequestLogHistorical",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("remote_ip", common.models.fields.CharField(max_length=20)),
                ("url", common.models.fields.TextField(blank=True)),
                ("method", common.models.fields.CharField(max_length=10)),
                ("response_code", common.models.fields.PositiveSmallIntegerField()),
                ("execution_time_ms", common.models.fields.IntegerField()),
                ("created_at", common.models.fields.DateTimeField()),
                (
                    "user",
                    common.models.fields.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro hist贸rico de petici贸n",
                "verbose_name_plural": "Registro hist贸rico de peticiones",
                "permissions": [
                    (
                        "view_request_log_historical",
                        "Ver registro hist贸rico de peticiones",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="RequestLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("remote_ip", common.models.fields.CharField(max_length=20)),
                ("url", common.models.fields.TextField(blank=True)),
                ("method", common.models.fields.CharField(max_length=10)),
                ("response_code", common.models.fields.PositiveSmallIntegerField()),
                ("execution_time_ms", common.models.fields.IntegerField()),
                ("created_at", common.models.fields.DateTimeField()),
                (
                    "user",
                    common.models.fields.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro de petici贸n",
                "verbose_name_plural": "Registro de peticiones",
                "permissions": [("view_request_log", "Ver registro de peticiones")],
            },
        ),
    ]
